---
title: Groovy List To Tree
author: John Layton
date: 2011/07/21

Scenario 1:

As a consumer of the blog application restful api
I want to be able to filter posts by author
And group posts by date then topic
In order to generate a time line of an authors posts

In Grails:

[http://localhost:8080/blog/post/filter.json?author=name](http://localhost:8080/blog/post/filter.json?author=name)

Firstly create the Post

    :::java
    class Post {

      static mapping = {
      }

      String author
      String title
      String topic
      String text
    
      Date dateCreated
      Date lastUpdated
    }

Then create the PostController

    :::groovy
    class PostController {

      def filter = {
        def posts = Post.findAllByAuthor(params.author ?: "")
        
        posts = posts.groupBy({ it.dateCreated.format("yyyymmdd") })
        posts.each({ it.value = it.value.groupBy({ it.topic }) })
        
        withFormat {
          json { render posts as JSON }
        }
      }          
    }  

Expected result

    :::json
    {
      "20110101": {
        "Music": [
          { "author": "...", "title": "...", "topic": "...", "text": "..." }
        ],
        "Death": [
          { "author": "...", "title": "...", "topic": "...", "text": "..." }
        ]
      },
      "20110102": {
        "Music": [
          { "author": "...", "title": "...", "topic": "...", "text": "..." }
        ],
        "Food": [
          { "author": "...", "title": "...", "topic": "...", "text": "..." }
        ]
      },
    }

Scenario 2:

As a consumer of the blog application restful api
I want to be able to filter posts by author
And group posts by topic then date
In order to find and follow an authors series of posts on a specific topic

[http://localhost:8080/blog/post/filter.json?author=name&grouping=topic](http://localhost:8080/blog/post/filter.json?author=name&grouping=topic)

Update the PostController

    :::groovy
    def filter = {
      def posts = Post.findAllByAuthor(params.author ?: "")

      if (params.grouping && params.grouping.equals("topic")) {
        posts = posts.groupBy({ it.topic })
        posts.each({ 
          it.value = it.value.groupBy({ it.dateCreated.format("yyyymmdd") }) 
        })
      } else {
        posts = posts.groupBy({ it.dateCreated.format("yyyymmdd") })
        posts.each({ it.value = it.value.groupBy({ it.topic }) })
      }
      
      withFormat {
        json { render posts as JSON }
      }
    }          

Scenario 3:

As a consumer of the blog application restful api
I want to be able to filter posts by author
And group posts by date last updated then topic
In order to find the content of the most active topics

Update the PostController

    :::groovy
    def filter = {
      def posts = Post.findAllByAuthor(params.author ?: "")

      if (params.grouping && params.grouping.equals("topic")) {
        posts = posts.groupBy({ it.topic })
        posts.each({ 
          it.value = it.value.groupBy({ it.dateCreated.format("yyyymmdd") }) 
        })
      } else if (params.grouping && params.grouping.equals("lastupdate")) {
        posts = posts.groupBy({ it.lastUpdated.format("yyyymmdd") })
        posts.each({ it.value = it.value.groupBy({ it.topic }) })
      } else {
        posts = posts.groupBy({ it.dateCreated.format("yyyymmdd") })
        posts.each({ it.value = it.value.groupBy({ it.topic }) })
      }
      
      withFormat {
        json { render posts as JSON }
      }
    }          

What about this added to the bootstrap file:

Add this to BootStrap.groovy

    :::groovy
    List.metaClass.toTree = { List closures ->
      if(!closures.empty)
        delegate.groupBy(closures.head()).each({ 
          it.value = closures.tail().empty ? it.value : it.value.toTree(closures.tail()) 
        }).sort({ a,b -> a.key <=> b.key })
      else
        delegate
    }
    List.metaClass.toTree = { Closure... closures ->
      delegate.toTree(closures as List);
    }

Update the PostController

    :::groovy
    def filter = {
      def posts = Post.findAllByAuthor(params.author ?: "")

      if (params.grouping && params.grouping.equals("topic")) {
        posts = posts.toTree({ it.topic }, { it.dateCreated.format("yyyymmdd") })
      } else if (params.grouping && params.grouping.equals("lastupdate")) {
        posts = posts.toTree({ it.lastUpdated.format("yyyymmdd") }, { it.topic })
      } else {
        posts = posts.toTree({ it.dateCreated.format("yyyymmdd") }, { it.topic })
      }
      
      withFormat {
        json { render posts as JSON }
      }
    }        

Add this to BootStrap.groovy

    :::groovy
    List.metaClass.toTree = { String... properties ->
      delegate.toTree(properties.collect({ name -> { bean -> bean?."${name}"  }  });
    }

Update the Post

    :::groovy
    class Post {
      ...
      def getCreated() {
        dateCreated.format("yyyymmdd")
      }
      
      def getUpdated() {
        lastUpdated.format("yyyymmdd")
      }  
      ...
    }

Update the PostController

    :::groovy
    def filter = {
      def posts = Post.findAllByAuthor(params.author ?: "")

      if (params.grouping && params.grouping.equals("topic")) {
        posts = posts.toTree("topic", "created")
      } else if (params.grouping && params.grouping.equals("lastupdate")) {
        posts = posts.toTree("updated", "topic")
      } else {
        posts = posts.toTree("created", "topic")
      }
      
      withFormat {
        json { render posts as JSON }
      }
    }        
  
We can now add these grouping properties to the URL

[...&grouping=topic,created](http://localhost:8080/blog/post/filter.json?author=name&grouping=topic,created)

[...&grouping=updated,topic](http://localhost:8080/blog/post/filter.json?author=name&grouping=updated,topic)

[...&grouping=created,topic](http://localhost:8080/blog/post/filter.json?author=name&grouping=created,topic)


Update the PostController

    :::groovy
    def filter = {
      def posts = Post.findAllByAuthor(params.author ?: "")

      if (params.grouping) {
        posts = posts.toTree(params.grouping.split(','))
      }
      
      withFormat {
        json { render posts as JSON }
      }
    }        

Extend:

Scenario 4:

As a consumer of the blog application restful api
I want to be able to filter posts by topic
And group posts by authors home city
In order to produce a heat map of topic populatrity

Update the Post and add the Author and Address

    :::groovy
    class Post {
      ...
      Author author
      ...
    }

    class Author {

      static mapping = {
      }
      
      String name
      Address address
    }

    class Address {
      
      static mapping = {
      }

      String city
    }

Update the BootStrap.groovy

    :::groovy
    List.metaClass.toTree = { String... properties ->
      delegate.toTree(properties.collect({ name -> { bean -> 
        name.split("\\.").inject(bean, { ibean, iname -> ibean?."${iname}"  })  } 
      }));
    }

[...&grouping=author.address.city](http://localhost:8080/blog/post/filter.json?topic=Food&grouping=author.address.city)

    :::json
    {
      "Melbourne": [
        { 
          "author": { "address": { "city": "Melbourne" } }, 
          "title": "...", 
          "topic": "...", 
          "text": "..."
        },
        { 
          "author": { "address": { "city": "Melbourne" } }, 
          "title": "...", 
          "topic": "...", 
          "text": "..."
        }
      ],
      "Adelaide": [
        { 
          "author": { "address": { "city": "Adelaide" } }, 
          "title": "...", 
          "topic": "...", 
          "text": "..."
       },
      ],
    }

