---
title: Groovy List Two Tree
author: John Layton
date: 2011/07/21

Scenario 1:

As a consumer of the blog application restful api
I want to be able to filter posts by author
And group posts by date then topic 
and have each node in the tree idenditified by the text propery
and have the children of each node contained in an item array
In order to generate a nested list view of blogs

Example:

[Sencha Touch Example](http://dev.sencha.com/deploy/touch/examples/kitchensink)

In Grails:

[http://app/blog/post/filter?format=json&grouping=topic,created](http://localhost:8080/blog/post/filter?format=json&grouping=topic,created)

Expected Json:

    :::json
    [
      {
        text: "blogs",
        items: [
          {
            text: "20110101",
            items: [
              {
                text: "Music"
                items: [
                  { leaf: true, author: "...", title: "...", topic: "...", text: "...", ... }
                ]
              },
              {
                text: "Death"
                items: [
                  { leaf: true, author: "...", title: "...", topic: "...", text: "...", ... }
                ]
              }
            ]
          },
          {
            text: "20110102",
            items: [
              {
                text: "Food"
                items: [
                  { leaf: true, author: "...", title: "...", topic: "...", text: "...", ... }
                  { leaf: true, author: "...", title: "...", topic: "...", text: "...", ... }
                ]
              }
            ]
          },
        ]
      }
    ]


Add the leaf property to Post:

    :::groovy
    class Post {
      static transients = ["leaf"]
      ...
      def getLeaf() { true }
    }

Create a class to model the Node (not really needed - a map would do)

    :::groovy
    class Node {
      def text  = ""
      def items = []
    }

Update the BootStrap.groovy

    :::groovy
    List.metaClass.toTree = { List closures, Closure node = null ->
      if(closures && !closures.empty) {
        def result = delegate.groupBy(closures.head()).each({ entry ->
          entry.value = closures.tail().empty ? 
            entry.value : entry.value.toTree(closures.tail(), node)
        }).sort({ a,b -> a.key <=> b.key })
        if (node)
          result.collect(node)
        else
          result
      }
      else
        delegate
    }

    List.metaClass.toNodeTree = { Closure... closures ->
      delegate.toTree(closures as List, { entry ->
        new Node(text: entry.key ?: "Unknown", items: entry.value)
      })
    }

    List.metaClass.toNodeTree = { String... properties ->
      delegate.toTree(properties.collect({ name -> 
          { bean -> name.split("\\.").inject(bean, { ibean, iname -> ibean?."${iname}"  })  } 
        }), { entry ->
          new Node(text: entry.key ?: "Unknown", items: entry.value)
        })
    }

Add a factory method to Node

    :::groovy
    class Node {
      def text  = ""
      def items = []
      
      static create(entry) {
         new Node(text: entry.key ?: "Unknown", items: entry.value)
      }
    }

Then use the factory method in BootStrap.groovy

    :::groovy
    List.metaClass.toNodeTree = { Closure... closures ->
      delegate.toTree(closures as List, Node.&create)
    }

    List.metaClass.toNodeTree = { String... properties ->
      delegate.toTree(properties.collect({ name -> 
          { bean -> name.split("\\.").inject(bean, { ibean, iname -> ibean?."${iname}"  })  } 
        }), Node.&create)
    }


If we wish the client to describe the Node then update BootStrap.groovy

    :::groovy
    List.metaClass.toTree = { Closure node, Closure... closures ->
      delegate.toTree(closures as List, node)
    }

    List.metaClass.toTree = { Closure node, String... properties ->
      delegate.toTree(properties.collect({ name -> 
          { bean -> name.split("\\.").inject(bean, { ibean, iname -> ibean?."${iname}"  })  } 
        }), node)
    }

Update the PostController

    :::groovy
    def filter = {
      def posts = Post.findAllByAuthor(params.author ?: "")

      def node = { entry -> [text: entry.key, items: entry.value] }

      if (params.grouping) {
        posts = posts.toTree(node, params.grouping.split(','))
      }
      
      withFormat {
        json { render posts as JSON }
      }
    }        

